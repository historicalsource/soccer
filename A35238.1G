	.TITLE SMOVOB
	.RADIX 16
	.SBTTL ****************************
	.SBTTL *
	.SBTTL * MODULE: SMOVOB
	.SBTTL * PROGRAMMER: DFT
	.SBTTL * FUNCTION: PROCESS MOVING OBJECTS
	.SBTTL *
	.SBTTL ****************************
	.REPT 0
DATE: 16-FEB-79
DISK #: 11
PROJECT #: 20303
	.ENDR
	.PAGE
	.INCLUDE SOCOMN
	.PAGE
	.SBTTL SYMBOL DEFINITIONS
;
;GLOBALLY REF'D NON BASE PAGE LOCATIONS
;
	.GLOBL VERDIS,HORDIS,TPICT,TCOLR,HGOAL,VGOAL
	.GLOBL FLAGS,LPICT1,LPICT2,TEAM,LCOLOR
;
;GLOBALLY REFERENCED BASE PAGE LOCATIONS
;
	.GLOBL OBJECT,TVINC,THINC,SLOCK,SFDL,SFDH,J,K,VPOSL,SCRODS
	.GLOBL VPOS,HPOSL,HPOSH,OBDIRC,OPARAM,KICKER,OBFEET
	.GLOBL STATE,FRAME
;
;GLOBAL ENTRY POINTS DEFINED IN THIS MODULE
;
	.GLOBL KIKPOS,PLAMOV,POSDIS,MOVER,PICBL1
;EXTERNAL E.P.
	.GLOBL TWOONE
;
;COLORS
;
WHITE1	=3
LGREY1	=2
BLACK1	=1
WHITE2	=WHITE1*4
WHITE3	=WHITE2*4
BLACK2	=BLACK1*4
BLACK3	=BLACK2*4
LGREY2	=LGREY1*4
LGREY3	=LGREY2*4
;
;MISC
;
NUMPOB	=16.			;# PHYSICAL MOVING OBJECTS
ATACKR	=20			;ATTACKER CODE (OPARAM)
;
;LEG EQUATES
;
LEFTLG	=0
STILL	=1
RIGHTL	=2
STILR	=3

	.SBTTL ZERO(BASE) PAGE RAM LOCATIONS (INTERNAL USE)
	.BSECT BPMOVO
LSFDL:	.BLKB 2				;LEFT SIDE OF VISIBLE SCREEN
RSFDL:	.BLKB 2				;RIGHT SIDE
	.PAGE
	.CSECT
	.SBTTL KICKOFF INITIALIZE TABLES
INHORL:	.WORD LGOLI		;LEFT GOALIE (HORIZ POSITIONS)
	.WORD LCENTL-580	;	ATTACKER
	.WORD LCENTL-580	;	ATTACKER
	.WORD LCENTL-0C00	;	DRONE
	.WORD RGOLI		;RIGHT GOALIE
	.WORD RCENTL+5A0	;	ATTACKER
	.WORD RCENTL+5A0	;	ATTACKER
	.WORD RCENTL+0C20	;	DRONE
	.WORD RCENTL		;BALL
INVERT:	.BYTE VCENTR		;LEFT GOALIE (VERT POSITIONS & COLOR)
INCOLOR:.BYTE WHITE3+WHITE2+WHITE1
	.BYTE VCENTR-2C,LGREY3!WHITE2!LGREY1
	.BYTE VCENTR+2E,LGREY3!WHITE2!LGREY1
	.BYTE VCENTR,WHITE3!WHITE2!WHITE1
	.BYTE VCENTR,BLACK3!BLACK2!BLACK1
	.BYTE VCENTR-2C,LGREY3!BLACK2!LGREY1
	.BYTE VCENTR+2E,LGREY3!BLACK2+LGREY1
	.BYTE VCENTR,BLACK2!BLACK1!BLACK3
	.BYTE VCENTR+1,WHITE3!WHITE2!BLACK1
;
KIKPOS:
	LDX I,LOBLOOP		;SEND EACH PLAYER TO KICKOFF POSITIONS
	BEGIN
	  LDA AX,INHORL		;HORIZ POSITIONS
	  STA AX,HGOAL
	  LDA AX,INHORL+1
	  STA AX,HGOAL+1
	  LDA AX,INVERT		;VERT POSITIONS
	  STA AX,VGOAL
	  LDA AX,INCOLOR	;COLOR
	  STA AX,LCOLOR
	  DEX
	  DEX
	MIEND
	RTS
	.PAGE
	.SBTTL UPDATE OBJECT'S PICTURE & POSITION
PLAMOV:
	LDX OBJECT		;PLAYER ID
	LDY I,LEFBDL-LEFBDL	;BIG BOUNDARY ID (MOST PROBABLE)
	LDA STATE
	CMP I,S.PLAY		;HALF FIELD BOUNDARIES ONLY IN PLAY
	IFEQ			;STATE DURING KICKOFF
	  LDA KICKER		;PLAY STATE
	  IFPL			;KICKOFF?
	    LDY AX,TEAM		;KICKOFF. KEEP PLAYER IN HIS
	    LDA AY,LRBNDY	;HALF OF FIELD
	    TAY
	  THEN
	THEN
	.PAGE
	.SBTTL UPDATE POSITIONS
;
;UPDATE HORIZONTAL POSITION, KEEPING THE PLAYER IN BOUNDS
;
	JSR MOVER		;MOVE PLAYER
	BONDRY <ZX,HPOSL>,<AY,LEFBDL>,<AY,RITBDL>
	  LDA AX,OPARAM		;KEEP TRACKBALL PLAYERS VISIBLE
	  AND I,ATACKR
	  IFNE
	    BONDRY <ZX,HPOSL>,<LSFDL>,<RSFDL>
	  THEN
;
;UPDATE VERTICAL POSITION, KEEPING PLAYER IN BOUNDS (VERTICAL BOUNDARIES ARE
;ALWAYS THE SAME)
;
	LDA ZX,VPOS		;KEEP PLAYER IN BOUNDS VERTICALLY
	CMP I,BSIDEL+4
	IFCC
	  LDA I,BSIDEL+4
	ELSE
	  CMP I,TSIDEL-5
	  IFCS
	    LDA I,TSIDEL-5
	  THEN
	THEN
	STA ZX,VPOS
	.PAGE
	.SBTTL UPDATE PICTURES
	LDA AX,OBFEET
	LSR
	LSR
	LSR
	LSR			;SEQUENCE IS LEFT LEG FORWARD (0),
	AND I,06		;STILL(2), RIGHT LEG FORWARD (4),
	CMP I,STILR*2		;STILL(6), AND THEN BACK TO 0.
	IFEQ			;USE SAME PICTURE FOR 2 AND 6.
  	  LDA I,STILL*2
	THEN
	STA J
	LDA AX,OBDIRC		;GET ITS DIRECTION
	LSR
	AND I,0F
	ASL
	STA K
	ASL			;DETERMINE PICTURE #'S TO USE
	CLC
	ADC K
	CLC
	ADC J
	TAY
	LDA AX,FLAGS		;IF OFFSIDES, FLASH IT
	AND I,FOFFSI
	IFNE
	  LDA FRAME
	  AND I,4
  	  BNE BLNKPI		;BLANK PICTURES
	THEN
	LDA AX,FLAGS
	AND I,FINACT		;PLAYER INACTIVE?
	BNE BLNKPI
	LDA Y,PICTRL		;NO. UPDATE LEFT HALF OF OBJECT
	JSR STARS		;IF LEFT ATTACKER, GIVE HIM DIF UNIFORM.
	STA AX,LPICT1
	LDA Y,PICTRR		;UPDATE RIGHT HALF OF OBJECT
	JSR STARS		;IF LEFT ATTACKE,GIVE HIM DIF UNIFORM.
	STA AX,LPICT2
	RTS
;
STARS:	CPX I,4			;GIVE RIGHT PLAYER ON EACH TEAM PLUS SIGN.
	BEQ 1$
	CPX I,0A
	IFEQ
1$:	  ORA I,20
	THEN
	RTS
BLNKPI:	LDA I,PBLANK		;BLANK PLAYER'S PICTURES
	STA AX,LPICT1
	STA AX,LPICT2
	RTS
	.PAGE
	.SBTTL HORIZ. BOUNDARIES FOR PLAYERS
LEFBDL:	.WORD LENDL-<3*20>	;* DURING A GAME. LEFT SIDE
RITBDL:	.WORD RENDL+<4*20>	;RIGHT SIDE
LEFKIK:	.WORD LENDL-<3*20>	;* DURING A KICKOFF - LEFT PLAYER
	.WORD LCENTL-<5*20>	;RIGHT SIDE IS CENTER LINE
RITKIK:	.WORD RCENTL+<6*20>	;* DURING A KICKOFF - RIGHT PLAYER
	.WORD RENDL+<4*20>
LRBNDY:	.BYTE LEFKIK-LEFBDL,0,RITKIK-LEFBDL
	.PAGE
	.SBTTL MOVER
;SUBROUTINE: MOVER
;FUNCTION: UPDATE AN OBJECT'S POSITION
;INPUT: X=OBJECT # * 2
;	TVINC,TVINC+1=VERTICAL COMPONENT OF MOTION VECTOR
;	THINC,THINC+1=HORIZONTAL COMPONENT OF MOTION VECTOR
;	HPOSL,H(X)=CURRENT HORIZONTAL POSITION OF OBJECT
;	VPOS,L(X)=CURRENT VERTICAL POSITION OF OBJECT
;
MOVER:				;ADD HORIZ INCREMENT TO CURRENT HORIZ POSITION
	DPADD THINC,THINC+1,<X,HPOSL>,<X,HPOSH>
				;ADD VERT INCREMENT TO CURRENT VERT POSITION
	LDA TVINC
	CLC
	ADC X,VPOSL
	STA X,VPOSL
	LDA TVINC+1
	IFPL			;WATCH OUT FOR WRAP AROUND
	  ADC X,VPOS
	  CMP X,VPOS
	  IFCC
	    LDA I,0FF
	  THEN
	ELSE
	  ADC X,VPOS
	  CMP X,VPOS
	  IFNE
	  IFCS
	    LDA I,0
	  THEN
	  THEN
	THEN
	STA X,VPOS
	RTS
	.PAGE
	.SBTTL UPDATE ALL PHYSICAL OBJECT'S SCROLL RELATED POSITIONS
;INPUT:	SFDL,H:		LEFTMOST SCROLLFIELD POSITION
;	ARRAYS CONTAINING DATA FOR EACH LOGICAL OBJECT
;	HPOSL,H:	ABSOLUTE HORIZONTAL POSITION
;	VPOS,L:		ABSOLUTE VERTICAL POSITION
;	LPICT1,2:	PICTURE #'S
;	LCOLOR:		COLOR
;OUTPUT:SCRODS:		SCROLLFIELD OFFSET IN DOTS
;	ARRAYS CONTAINING DATA FOR EACH PHYSICAL (MOVING OBJECT):
;	VERDIS:		DISPLAY VERTICAL POSITION (DOTS)
;	HORDIS:		DISPLAY HORIZONTAL POSITION (DOTS)
;	TPICT:		DISPLAY PICTURE #
;	TCOLR:		DISPLAY COLOR CODE
;
POSDIS:	LDY I,<NUMPOB-1>*2	;SET INDEX TO 1ST MOVING OBJECT
	INC SLOCK		;LOCK OUT MOTUP
	LDX I,LOBLOOP		;GO THRU FOLLOWING LOOP FOR
	BEGIN			;EACH LOGICAL OBJECT
	  LDA ZX,HPOSL
	  SEC			;SUBTRACT LEFTMOST SCROLLFIELD
	  SBC SFDL		;HORIZONTAL POSITION, SUBTRACT
	  AND I,0E0		;OFFSET (FROM CENTER TO LEFT SIDE)
	  STA J
	  LDA ZX,HPOSH
	  SBC I,1		;ADJUST FOR OFFSET
	  SBC SFDH
	  IFCS			;IS THE PLAYER TO THE RIGHT OF THE LEFT SIDE?
	    CMP I,32.		;YES IS THE PLAYER TO THE LEFT
	    IFCC		;OF THE RIGHT SIDE OF SCROLLFIELD?
	      LSR		;YES. THIS PLAYER IS ON THE SCROLLFIELD.
	      ORA J
	      ROL
	      ROL		;CALCULATE AND SAVE HIS HORIZONTAL
	      ROL		;POSITION, IN DOTS, FROM THE LEFT
	      ROL		;SIDE OF THE SCROLLFIELD.
	      SEC		;ADJ FOR HARDWARE
	      SBC I,07
	      STA AY,HORDIS
	      LDA X,VPOS	;ADD OFFSET OF VERTICAL POSITION
	      CLC		;(TOP OF LEFT CORNER TO CENTER OF STAMP)
	      ADC I,9		;AND TRANSFER RESULT TO VERTICAL
	      STA AY,VERDIS	;POSITION
	      LDA AX,LPICT1	;TRANSFER PICTURE AND COLOR
	      STA AY,TPICT	;DATA DIRECTLY
	      LDA AX,LCOLOR
	      STA AY,TCOLR
	      DEY		;YES. DO HIS RIGHT HALF
	      DEY
	      LDA AX,LPICT2	;RIGHT HALF PICTURE AND
	      STA AY,TPICT	;COLOR
	      LDA AY,TCOLR+2
	      STA AY,TCOLR
	      LDA AY,VERDIS+2	;RIGHT HALF VERTICAL=
	      STA AY,VERDIS	;LEFT HALF.
	      LDA AY,HORDIS+2	;RIGHT HALF HORIZONTAL
	      CLC
	      ADC I,08		;IS 8 DOTS TO THE RIGHT
	      STA AY,HORDIS
	      DEY		;POINT TO NEXT MOVING OBJECT
	      DEY
	      BMI ALLOUT	;WATCH OUT FOR MOV. OBJ. DEPLETION
	    THEN
	  THEN
	  DEX			;POINT TO NEXT LOGICAL OBJECT
	  DEX
	MIEND			;IF MORE LOGICAL OBJECT, LOOP BACK
	CPY I,0			;NOW ZERO OUT ANY UNUSED
	IFPL			;MOVING OBJECTS
	  LDA I,0
	  BEGIN
	    STA AY,VERDIS
	    DEY
	    DEY
	  MIEND
	THEN
ALLOUT:	LDY SFDL		;ADJUST THE SCROLLFIELD OFFSET
	LDA SFDH
	JSR TWOONE
	STA A,SCRODS
	LSR SLOCK		;ALLOW MOTUP
	LDA SFDL		;SET UP LEFT & RIGHT SIDE OF SCREEN
	STA LSFDL
	STA RSFDL
	LDA SFDH
	CLC
	ADC I,3
	STA LSFDL+1
	CLC
	ADC I,28.
	STA RSFDL+1
	RTS
	.PAGE
	.SBTTL PICTURE # DEFINITIONS
;
;ACTUAL PICTURE # DEFINITIONS:CHARS 2&3=ANGLE FACING; CHAR 4=
; L (LEFT LEG FORWARD), R(RIGHT LEG FORWARD), OR S (STILL)
; CHAR 5=(L) LEFT OR (R) RIGHT HALF
;
PBLANK	=00?REVERS
P68RR1	=01?REVERS
P68RL1	=02?REVERS
P45RR1	=03?REVERS
P45RL1	=04?REVERS
P23RR1	=05?REVERS
P23RL1	=06?REVERS
P00RR1	=07?REVERS
P00RL1	=08?REVERS
P90SR1	=09?REVERS
P90SL1	=0A?REVERS
P68SR1	=0B?REVERS
P68SL1	=0C?REVERS
P45SR1	=0D?REVERS
P45SL1	=0E?REVERS
P23SR1	=0F?REVERS
P23SL1	=10?REVERS
P00SR1	=11?REVERS
P00SL1	=12?REVERS
P90LR1	=13?REVERS
P90LL1	=14?REVERS
P68LR1	=15?REVERS
P68LL1	=16?REVERS
P45LR1	=17?REVERS
P45LL1	=18?REVERS
P23LR1	=19?REVERS
P23LL1	=1A?REVERS
P00LR1	=P00RR1?FLIPPR
P00LL1	=P00RL1?FLIPPR
PICBL1	=1B?REVERS
PICBL2	=1C?REVERS
PICBL3	=1D?REVERS
PICBL4	=1E?REVERS
PICBL5	=1F?REVERS
PARROW	=3F?REVERS
	.PAGE
PNLL	=P90LL1			;FACE NORTH, LEFT LEG FORWARD, LEFT HALF
PNLR	=P90LR1			;				RIGHT HALF
PSRL	=PNLL?FLIPPR		;FACE SOUTH, RIGHT LEFT FORWARD, LEFT HALF
PSRR	=PNLR?FLIPPR		;				RIGHT HALF
PNRL	=PNLR?REVERS		;FACE NORTH, RIGHT LEFT FORWARD, LEFT HALF
PNRR	=PNLL?REVERS		;				RIGHT HALF
PSLL	=PSRR?REVERS		;FACE SOUTH, LEFT LEFT FORWARD,
PWLR	=PERL?REVERS
PERL	=P00RL1		;FACE EAST, RIGHT LEFT FORWARD
PERR	=P00RR1		
PSLR	=PSRL?REVERS
PWLL	=PERR?REVERS			;FACE WEST, LEFT LEG FORWARD
PWRL	=PWLL?FLIPPR		;FACE WEST, RIGHT LEFT FORWARD
PWRR	=PWLR?FLIPPR	
PELL	=P00LL1		;FACE EAST, LEFT LEG FORWARD
PELR	=P00LR1	
PNERL	=P45RL1		;FACE NORTH EAST, RIGHT LEG FORWARD
PNERR	=P45RR1
PSELL	=PNERL?FLIPPR		;FACE SOUTH EAST, LEFT LEG FORWARD
PSELR	=PNERR?FLIPPR
PNWLL	=PNERR?REVERS			;FACE NORTH WEST, LEFT LEG FORWARD
PNWLR	=PNERL?REVERS	
PSWRL	=PNWLL?FLIPPR		;FACE SOUTH WEST, RIGHT LEG FORWARD
PSWRR	=PNWLR?FLIPPR	
PNNERL	=P68RL1		;NNE, RIGHT LEG FORWARD
PNNERR	=P68RR1
PSSELL	=PNNERL?FLIPPR		;SSE, LEFT LEG FORWARD
PSSELR	=PNNERR?FLIPPR
PNNWLL	=PNNERR?REVERS			;FACE NORTH NORTH WEST, LEFT LEG FORWARD
PNNWLR	=PNNERL?REVERS		
PSSWRL	=PNNWLL?FLIPPR		;SSW, RIGHT LEG FORWARD
PSSWRR	=PNNWLR?FLIPPR
PNEERL	=P23RL1		;NEE, RIGHT LEG FORWARD
PNEERR	=P23RR1
PSEELL	=PNEERL?FLIPPR		;SEE, LEFT LEG FORWARD
PSEELR	=PNEERR?FLIPPR
PNWWLL	=PNEERR?REVERS			;NWW, LEFT LEG FORWARD
PNWWLR	=PNEERL?REVERS
PSWWRL	=PNWWLL?FLIPPR		;SWW, RIGHT LEG FORWARD
PSWWRR	=PNWWLR?FLIPPR
PNELL	=P45LL1		;NE, LEFT LEG FORWARD
PNELR	=P45LR1
PSERL	=PNELL?FLIPPR
PSERR	=PNELR?FLIPPR
PNWRL	=PNELR?REVERS			;NW, RIGHT LEG FORWARD
PNWRR	=PNELL?REVERS	
PSWLL	=PNWRL?FLIPPR		;SW, LEFT LEG FORWARD
PSWLR	=PNWRR?FLIPPR
PNNELL	=P68LL1		;NNE, LEFT LEG FORWARD
PNNELR	=P68LR1
PSSERL	=PNNELL?FLIPPR		;SEE, RIGHT LEG FORWARD
PSSERR	=PNNELR?FLIPPR
PNNWRL	=PNNELR?REVERS			;NNW, RIGHT LEG FORWARD
PNNWRR	=PNNELL?REVERS
PSSWLL	=PNNWRL?FLIPPR		;SSW, LEFT LEG FORWARD
PSSWLR	=PNNWRR?FLIPPR
PNEELL	=P23LL1		;NEE, LEFT LEG FORWARD
PNEELR	=P23LR1
PSEERL	=PNEELL?FLIPPR		;SEE, RIGHT LEG FORWARD
PSEERR	=PNEELR?FLIPPR
PNWWRL	=PNEELR?REVERS			;NWW, RIGHT LEG FORWARD
PNWWRR	=PNEELL?REVERS			
PSWWLL	=PNWWRL?FLIPPR		;SWW, LEFT LEG FORWARD
PSWWLR	=PNWWRR?FLIPPR
PNSL	=P90SL1			;N, STILL
PNSR	=P90SR1
PSSL	=PNSL?FLIPPR		;S, STILL
PSSR	=PSSL?REVERS
PESL	=P00SL1		;E, STILL
PESR	=P00SR1
PWSL	=PESR?REVERS			;W, STILL
PWSR	=PESL?REVERS	
PNESL	=P45SL1		;NE, STILL
PNESR	=P45SR1
PSESL	=PNESL?FLIPPR		;SE, STILL
PSESR	=PNESR?FLIPPR
PNWSL	=PNESR?REVERS			;NW, STILL
PNWSR	=PNESL?REVERS
PSWSL	=PNWSL?FLIPPR		;SW, STILL
PSWSR	=PNWSR?FLIPPR
PNNESL	=P68SL1		;NNE, STILL
PNNESR	=P68SR1
PSSESL	=PNNESL?FLIPPR		;SSE, STILL
PSSESR	=PNNESR?FLIPPR
PNNWSL	=PNNESR?REVERS			;NNW, STILL
PNNWSR	=PNNESL?REVERS
PSSWSL	=PNNWSL?FLIPPR		;SSW, STILL
PSSWSR	=PNNWSR?FLIPPR
PNEESL	=P23SL1		;NEE, STILL
PNEESR	=P23SR1
PSEESL	=PNEESL?FLIPPR		;SEE, STILL
PSEESR	=PNEESR?FLIPPR
PNWWSL	=PNEESR?REVERS			;NWW, STILL
PNWWSR	=PNEESL?REVERS
PSWWSL	=PNWWSL?FLIPPR		;SWW, STILL
PSWWSR	=PNWWSR?FLIPPR
	.PAGE
	.SBTTL PLAYER PICTURE TABLE
;THERE IS ONE GROUP OF ENTRIES FOR EACH OF 16 DIRECTIONS PLAYER COULD
;FACE (FROM N TO NNW GOING CLOCKWISE). WITHIN EACH GROUP THERE IS ONE
;SUBGROUP FOR LEFT LEG FORWARD, ONE FOR RIGHT LEG FORWARD, ONE FOR
;STANDING STILL & ONE SPARE. EACH SUBGROUP CONTAINS THE LEFT & RIGHT
;HALVES (EACH IS 8 X 16) OF THE PICTURE.
;
PICTRL:	.BYTE PNLL
PICTRR:	.BYTE PNLR
	.BYTE PNSL,PNSR,PNRL,PNRR
	.BYTE PNNELL,PNNELR,PNNESL,PNNESR,PNNERL,PNNERR
	.BYTE PNELL,PNELR,PNESL,PNESR,PNERL,PNERR
	.BYTE PNEELL,PNEELR,PNEESL,PNEESR,PNEERL,PNEERR
	.BYTE PELL,PELR,PESL,PESR,PERL,PERR
	.BYTE PSEELL,PSEELR,PSEESL,PSEESR,PSEERL,PSEERR
	.BYTE PSELL,PSELR,PSESL,PSESR,PSERL,PSERR
	.BYTE PSSELL,PSSELR,PSSESL,PSSESR,PSSERL,PSSERR
	.BYTE PSLL,PSLR,PSSL,PSSR,PSRL,PSRR
	.BYTE PSSWLL,PSSWLR,PSSWSL,PSSWSR,PSSWRL,PSSWRR
	.BYTE PSWLL,PSWLR,PSWSL,PSWSR,PSWRL,PSWRR
	.BYTE PSWWLL,PSWWLR,PSWWSL,PSWWSR,PSWWRL,PSWWRR
	.BYTE PWLL,PWLR,PWSL,PWSR,PWRL,PWRR
	.BYTE PNWWLL,PNWWLR,PNWWSL,PNWWSR,PNWWRL,PNWWRR
	.BYTE PNWLL,PNWLR,PNWSL,PNWSR,PNWRL,PNWRR
	.BYTE PNNWLL,PNNWLR,PNNWSL,PNNWSR,PNNWRL,PNNWRR
	.END
                                                                                               