	.TITLE STBALL
	.RADIX 16
	.SBTTL ******************************************
	.SBTTL *					*
	.SBTTL * MODULE:  STBALL			*
	.SBTTL * PROGRAMMER:  DFT			*
	.SBTTL * FUNCTION:  PROCESS GOALIE & ATTACKER	*
	.SBTTL *					*
	.SBTTL ******************************************
	.REPT 0
DATE:		16-FEB-79
PROJECT CHARGE:	20303
DISK NUMBER:	11 (BACKUP: B28)
	.ENDR
	.PAGE
	.INCLUDE SOCOMN
	.PAGE
	.SBTTL SYMBOL DEFINITIONS
;
;MISC CONSTANTS
;
X.LIM	=3F			;MAXIMUM TBALL READING
STILLB	=20			;LEGS STILL
;
;GLOBAL ENTRY POINTS DEFINED HERE
;
	.GLOBL PATACK,PGOALY,DIRCAL,VELOUP,BGDELT,RESULT
	.GLOBL POINTB,ONETWO,TWOONE,QCHKS5,INITIL,CLRINC
;
;EXTERNALLY DEFINED ENTRY POINTS
;
	.GLOBL PLAMOV,GOALC,PDRONE,INIBAL
;
;GLOBAL VARIABLES
;
	.GLOBL TBHD,TBVD,THINC,TVINC,OBJECT,OPARAM,FLAGS,VPOS,DRIBBL,CHKSM5
	.GLOBL J,BHPOSL,HGOAL,VGOAL,STATE,BVPOSL,HPOSH,TEAM
	.GLOBL HVVEL,HHVEL,OBDIRC,OBFEET
	.GLOBL CNTHGL,ABGVD,ABGHDL,BGVD,BALPEN,HBALZO
;
;BASE PAGE SYMOBLS USED ONLY INTERNALLY
;
	.BSECT BPTB
TDIREC:	.BLKB 1			;TEMP STORAGE FOR OBJECT'S DIRECTION
BGHDLO:	.BLKB 2
XXX:	.BLKB 1
YYY:	.BLKB 1
ABSXXX:	.BLKB 1
ABSYYY:	.BLKB 1
GFDIRE:	.BLKB 1
	.PAGE
	.PAGE
	.SBTTL PROCESS ATTACKER MOVEMENT
	.CSECT
;INPUT:	OBJECT=LOGICAL OBJECT # OF ATTACKER
;	OPARAM=TBALL (D2-D0) DATA
;
PATACK:
	LDA AX,FLAGS		;USE DRONE BRAIN IF DRONE
	AND I,DRONE
	IFNE
	  JSR PDRONE
	ELSE
	LDA AX,FLAGS		;IF THIS PLAYER HAS NO GOAL
	IFMI
	  LDA STATE		;IF NOT IN PLAY STATE
	  CMP I,S.PLAY
	  IFNE
	    JSR CLRINC		;THEN DON'T MOVE PLAYERS
	  ELSE
	    LDA AX,OPARAM		;ELSE DRIVE HIM WITH HIS TRACKBALL
	    AND I,7
	    TAX
	    JSR TBALLC
	  THEN
	  JSR VELOUP		;UPDATE HIS VELOCITY
	ELSE			;ELSE DRIVE HIM TOWARDS HIS GOAL
	  JSR GOALC
	THEN
	THEN
	JSR DIRCALC		;DETERMINE PLAYER'S DIRECTION
	JMP PLAMOV		;UPDATE HIS PICTURE AND POSITION (USE ITS RTS)
	.PAGE
	.SBTTL PROCESS GOALIE MOVEMENT
;INPUT:	OBJECT=LOGICAL OBJECT # OF GOALIE
;
PGOALY:
	LDA I,0			;FACE RUNNING DIRECTION
	STA GFDIRE
	LDA STATE		;ARE PLAYERS TAKING THEIR POSITIONS?
	CMP I,S.PLAY
	IFEQ
	  CPX DRIBBL			;NO. DOES GOALIE HAVE BALL?
	  IFNE
	    LDY AX,TEAM
	    CPY HBALZO		;NO. IS BALL IN HIS HALF OF FIELD?
	    IFEQ
	      JSR CHASE		;YES. MAKE HIM CHASE BALL
	    THEN
	  THEN
	THEN
	JSR GOALC		;DRIVE GOALIE TOWARDS HIS GOAL
	LDX OBJECT		;POINT IN DIRECTION OF
	LDA GFDIRE		;TRAVEL IF AFTER BALL
	IFEQ
	  JSR DIRCALC
	ELSE
	  JSR POINTB
	  JSR FIGFET		;(FEET)
	THEN
	JMP PLAMOV		;UPDATE HIS PICTURE AND POSITION (USE ITS RTS)
;
CNTHGL:	.WORD LGOAL,RGOAL+20	;CENTER OF GOAL FOR LEFT, RIGHT TEAM
HPENAL	=80			;PENALTY AREA WIDTH
HPENAH	=9
VPENAL	=<TPENAR-BPENAR>/2	;PENALTY AREA HEIGHT /2
	.PAGE
	.SBTTL GOALIE CHASE BALL
CHASE:	    LDA AX,FLAGS		;NO. WE MUST SEND HIM AFTER THE BALL
	    AND I,NATGOAL		;SO SET HIM "NOT AT GOAL"
	    STA AX,FLAGS
	    LDA I,-1		;SET FLAG TO POINT GOALIE AT BALL
	    STA GFDIRE
	    LDA BALPEN		;IS BALL INSIDE PENALTY AREA?
	    IFEQ
	      LDA BHPOSL		;BALL INSIDE PENALTY AREA
	      STA AX,HGOAL		;SO SET IT AS GOALIE GOAL
	      LDA BHPOSL+1
	      STA AX,HGOAL+1
	      LDA BVPOSL+1
	      STA AX,VGOAL
	    ELSE
	      LDA ABGVD			;BALL OUTSIDE PENALTY AREA. SO SET
	      LSR			;GAOLIE'S GOAL=POINT ON LINE
	      CMP I,VPENAL		;BETWEEN BALL & CENTER OF GOAL, HALF
	      IFCS			;WAY TO BALL, UP TO PENALTY LINE.
	        LDA I,VPENAL
	      THEN
	      LDY BGVD
	      IFMI
	        NEGACC
	      THEN
	      CLC
	      ADC I,VCENTR
	      STA AX,VGOAL
	      LDA ABGHDL+1
	      LSR
	      STA AX,HGOAL+1
	      LDA ABGHDL
	      ROR
	      STA AX,HGOAL
	      COMPARE <AX,HGOAL>,<AX,HGOAL+1>,<I,HPENAL>,<I,HPENAH>
	      IFCS
	        LDA I,HPENAL
	        STA AX,HGOAL
	        LDA I,HPENAH
	        STA AX,HGOAL+1
	      THEN
	      LDA BGHDLO+1
	      IFMI
		DPNEGA <AX,HGOAL>,<AX,HGOAL>
	      THEN
	      LDY AX,TEAM
	      DPADD <AY,CNTHGL>,<AY,CNTHGL+1>,<AX,HGOAL>,<AX,HGOAL+1>
	    THEN
	    RTS
QCHKS5:	.BYTE CHKSM5		;5TH CHECKSUM (3200)
	.PAGE
	.SBTTL BALL GOAL DELTA
;INPUT:	Y=GOAL TEAM ID
BGDELT:
	    DPSUB BHPOSL,BHPOSL+1,<AY,CNTHGL>,<AY,CNTHGL+1>,BGHDLO,BGHDLO+1
	    DPABSV BGHDLO,ABGHDL
	    LDA BVPOSL+1
	    SEC
	    SBC I,VCENTR
	    STA BGVD
	    ABSACC
	    STA ABGVD
	    LDA I,0			;BALL OUTSIDE PENALY AREA?
	    STA BALPEN
	    COMPARE ABGHDL,ABGHDL+1,<I,HPENAL>,<I,HPENAH>
	    ROL BALPEN			;IF BALL IS IN PENALTY OR GOAL AREA
	    LDA ABGVD			;SIC GOALIE AFTER IT
	    CMP I,VPENAL
	    ROL BALPEN		;=0 IF BALL INSIDE PENALTY AREA
	    RTS
	.PAGE
	.SBTTL TBALL VECTOR COMPONENT CALCULATIONS
;==========================================================================
;MODULE:	TBALLC
;FUNCTION:	CALCULATE VERTICAL, HORIZONTAL COMPONENTS
;		OF A TBALL'S READING
;INPUT:		X=TBALL NUMBER*2
;		TBVD(X)=VERTICAL TBALL READING
;		TBHD(X)=HORIZONTAL TBALL READING
;		OBJECT=OBJECT NUMBER*2
;OUTPUT:	THINC & THINC+1=HORIZONTAL INCREMENT FOR THIS OBJECT
;		TVINC & TVINC+1=VERTICAL INCREMENT FOR THIS OBJECT
;		TBVD(X)=0
;		TBHD(X)=0
;		X IS GARBAGED
;=========================================================================
TBALLC:
	LDY I,0			;(WE COULD BE INTERRUPTED BETWEEN LDA & STY
	LDA ZX,TBHD		;AND HAVE TBALL COUNT UPDATED, WHEREUPON WE
	STY ZX,TBHD		;WOULD ZERO IT.) ANYWAY, SAVE V AND H TBALL
	STA THINC		;COUNTER VALUES TO ZERO THE COUNTER BUCKETS.
	LDA ZX,TBVD
	STY ZX,TBVD
	JSR TBCLIP		;CLIP VERTICAL COUNTER IF TOO HIGH
	ASL
	ROL
	ROL
	TAY			;SAVE BITS 4-0 OF CLIPPED
	AND I,0F8		;V COUNTER INTO BITS 7-3 OF TVINC
	STA TVINC		;(CLEAR BITS 2-0).
	TYA
	ROL
	AND I,7			;THEN SAVE BITS 7-5 OF CLIPPED V COUNTER INTO
	CMP I,4			;BITS 2-0 OF TVINC+1 WITH SIGN EXTENDED
	IFCS			;(CONSIDER BIT 2 THE SIGN BIT)
	  ORA I,0F8
	THEN
	STA TVINC+1
	LDY I,0
	LDA THINC
	IFMI			;EXTEND SIGN INTO HIGH BYTE
	  DEY
	THEN
	STY THINC+1		;AND SAVE IT
	JSR TBCLIP		;CLIP HORIZ COUNTER IF TOO HIGH
	STA THINC		;AND SAVE RESULT
	ASL THINC		;DOUBLE THE VELOCITY
	ROL THINC+1
	ASL TVINC
	ROL TVINC+1
	RTS
	.PAGE
	.SBTTL CALCULATE DIRECTION
;
;CALCULATE OBJECT'S DIRECTION
;OBDIRC CONTAINS CURRENT ANGLE X2
DIRCALC:LDX OBJECT
	LDA ZX,HHVEL
	STA XXX
	LDA ZX,HVVEL
	STA YYY
	JSR ANGLE		;CALCULATE DIRECTION OF TBALL VECTOR
	IFPL
	LDA ABSYYY		;IF VELOCITY OF TBALL IS
	CLC			;HIGH ENOUGH, THEN
	ADC ABSXXX		;USE ITS DIRECTION
	CMP I,16
	IFCS
	  LDA TDIREC		;USE TBALL DIRECTION
	  ASL
	  STA AX,OBDIRC
	ELSE
	LDA AX,OBDIRC
	LSR
	AND I,0F
	SEC			;CALC OLD ANGLE - NEW ANGLE
	SBC TDIREC
	IFNE
	CMP I,1			;EXIT IF DIFF. IS TOO SMALL.
	IFNE
	CMP I,-1
	IFNE
	IFPL			;IS IT + AND >= 8?
	  CMP I,8
	  IFCS
	    INC AX,OBDIRC	;YES INC ANGLE (ROTATE CLOCKWISE)
	  ELSE
	    DEC AX,OBDIRC	;NO. DEC ANGLE (ROTATE COUNTER -
	  THEN			;CLOCKWISE
	ELSE
	  NEGACC
	  CMP I,9
	  IFCS
	    DEC AX,OBDIRC
	  ELSE
	    INC AX,OBDIRC
	  THEN
	THEN
	THEN
	THEN
	THEN
	THEN
	THEN
	.PAGE
	.SBTTL FIGURE FEET
FIGFET:
	JSR RESULT		;CALCULATE TRAVEL DIST.
	IFEQ			;IF NO MOVEMENT, THEN KEEP FEET STILL
	  LDA AX,OBFEET		;SET STILL BIT
	  ORA I,STILLB
	ELSE
	  LSR
	  ADC AX,OBFEET
	THEN
	STA AX,OBFEET
	RTS
	.PAGE
;=======================================================================
;MODULE:	TBCLIP
;FUNCTION:	CLIP BALL COUNTER TO LIMIT IF IT EXCEEDS LIMIT X.LIM
;INPUT:		ACC=TBALL COUNTER VALUE
;OUTPUT:	ACC=TBALL COUNTER VALUE CLIPPED IF NECESSARY
;=======================================================================
TBCLIP:
	IFPL			;IF +,
	  CMP I,X.LIM		;CLIP TO + VALUE IF > LIMIT
	  IFCS
	    LDA I,X.LIM
	  THEN
	ELSE
	  CMP I,-X.LIM		;IF -,
	  IFCC			;CLIP TO - VALUE IF < LIMIT
	    LDA I,-X.LIM
	  THEN
	THEN
	LDY OBJECT
	CPY DRIBBL		;IF OBJECT IS THE DRIBBLER
	IFEQ
	  CMP I,80		;THEN DECREASE SPEED BY 1/4
	  ROR
	  STA J
	  CMP I,80
	  ROR
	  CLC
	  ADC J
	THEN
	RTS
	.PAGE
	.SBTTL INITIALIZE MOVING OBJECT VARIABLES
;
;CLEAR OUT TBALL COUNTERS FOR EACH PLAYER FOR STARTERS
;
INITIL:	LDX I,6			;SET COUNTER FOR 4 TBALLS
	LDA I,0
	BEGIN
	  STA ZX,TBVD		;CLEAR VERTICAL AND HORIZONTAL TBALL
	  STA ZX,TBHD		;COUNTERS
	  DEX
	  DEX
	MIEND
	LDX I,LOBLOOP		;CLEAR EACH OBJECT HORIZ & VERT VELOCITIES
	LDA I,0
	BEGIN
	  STA X,HHVEL
	  STA X,HVVEL
	  DEX
	  DEX
	MIEND
	JMP INIBAL		;NOW INITIALIZE BALL
;
;FUNCTION: POINT PLAYER AT BALL
;X=OBJECT #
POINTB:	LDY I,BALLNO*2
	JSR OBJANG
	ASL
	STA AX,OBDIRC
	RTS
;
;CLEAR TEMPORARY INCREMENT
;
CLRINC:	LDA I,0
	STA TVINC
	STA TVINC+1
	STA THINC
	STA THINC+1
	RTS
	.PAGE
	.SBTTL OBJECT TO OBJECT ANGLE
;INPUT:	X=OBJECT A
;	Y=OBJECT B
;OUTPUT:ACC=ANGLE FROM A TO B
OBJANG:
	LDA AX,VPOS		;CALCULATE VERT & HORIZ DELTA (IN 8 DOT UNITS)
	LSR
	STA J
	LDA AY,VPOS
	LSR
	SEC
	SBC J
	LSR
	LSR
	CMP I,10
	IFCS
	  ORA I,0E0
	THEN
	STA YYY
	LDA AY,HPOSH
	SEC
	SBC AX,HPOSH
	STA XXX
;	JMP ANGLE		;CALC ANGLE (FALL INTO NEXT PAGE)
	.PAGE
	.SBTTL CALCULATE ANGULAR DIRECTION OF VECTOR
;INPUT:
;	XXX,YYY=HORIZ & VERT COMPONENTS
;OUTPUT:ACC,TDIREC=DIRECTION OF TBALL
;	WHERE FF=NOT CHANGE
;	0-16= N TO NNW
;	ABSXXX,ABSYYY=ABSOLUTE VALUES OF HORIZ & VERT COMPONENTS
;	X,Y PRESERVED
;
ANGLE:
	LDA XXX			;ORIG. HORIZ. AND
	ABSACC
	STA ABSXXX
	LDA YYY			;VERTICAL
	ABSACC			;VELOCITIES
	STA ABSYYY
				;IF HORIZONTAL & VERTICAL
	ORA ABSXXX		;ARE ZERO THEN SET
	IFEQ			;NO CHANGE FLAG
	  LDA I,0FF
	  STA TDIREC
	ELSE
				;SET BITS 1-0 OF TDIREC
				;0=!VERTICAL!>!2*HORIZONTAL!
				;1=!2H!>=!VERTICAL!>!HORIZONTAL!
	LDA I,0			;2=!HORIZONTAL!>=!VERTICAL!
	STA TDIREC		;3=!HORIZONTAL!>!2*VERTICAL!
	LDA ABSXXX
	CMP ABSYYY
	IFCC			;IS HORIZONTAL <VERTICAL?
	  ASL			;YES
	  CMP ABSYYY
	  IFCS			;IS 2* HORIZ. <VERTICAL?
	    INC TDIREC		;NO
	  THEN
	ELSE			;NO (HORIZONTAL IS >= VERTICAL)
	  INC TDIREC
	  INC TDIREC
	  LDA ABSYYY
	  ASL
	  CMP ABSXXX		;IS 2* VERTICAL<HORIZONTAL?
	  IFCC
	    INC TDIREC		;YES
	  THEN
	THEN
				;SET BITS 3-2 OF TDIREC:
				;0= H AND V >0
				;1=H <0 AND V >0
				;2=H <0 AND V <0
				;3=H >0 AND V <0
	LDA XXX
	IFMI
	  LDA TDIREC
	  ORA I,8		;SET BIT 3 IF  <0
	  STA TDIREC
	THEN
	LDA XXX
	EOR YYY
	IFMI			;IF VERT & HORIZ HAVE DIFFERENT
	  LDA TDIREC		;SIGNS:
	  ORA I,4		;-SET BIT 2
 	  EOR I,3		;-FLIP BITS 1-0
	  STA TDIREC
	THEN
	THEN
	LDA TDIREC
	RTS
	.PAGE
	.SBTTL UPDATE VELOCITY OF OBJECT
;
;INPUT:	THINC,TVINC=2 BYTE H & V INCREMENTS
;OUTPUT:D7=SIGN BIT; D6=STAMP; D5-D3=DOTS IN STAMP; D2-D0=FRACTION
;	IN HHVEL AND HVVEL FOR THE OBJECT
;
VELOUP:	LDX OBJECT
	TYA
	PHA
	LDA TVINC+1		;CONVERT 2 BYTE  INCREMENT
	LDY TVINC
	JSR TWOONE
	STA ZX,HVVEL
	PLA
	TAY
	LDA THINC+1		;CONVERT 2 BYTE HORIZ INCREMENTS
	ROR			;TO 1 BYTE VELOCITY COMPONENT
	ROR
	ROR
	AND I,0C0
	STA ZX,HHVEL
	LDA THINC
	LSR
	LSR
	ORA ZX,HHVEL
	STA ZX,HHVEL
	RTS
	.PAGE
	.SBTTL SINGLE TO DOUBLE PREC (ASL 5)
;IN:	ACC=SINGLE PREC # SIGNED
;OUT:	ACC=HIGH
;	Y=LOW
;	X=PRESERVED
;FUNCT:	S6543210 TO SSSS6543 AND 210-----
ONETWO:	ROR
	ROR
	ROR
	ROR
	PHA
	AND I,0E0
	TAY
	PLA
	ROL
	AND I,1F
	CMP I,10
	IFCS
	  ORA I,0E0
	THEN
	RTS
	.SBTTL DOUBLE TO SINGLE PREC (LSR 5)
;IN:	ACC=HIGH
;	Y=LOW
;OUT:	ACC=RESULT
;	X=PRESERVED
;FUNCT:	(LO)ABCDEFGH IJKLMNOP(HI) TO LMNOPABC
TWOONE:	STY J
	ASL J
	ROL
	ASL J
	ROL
	ASL J
	ROL
	RTS
	.END


                                                                                                                                                                                                                                                                                                                        