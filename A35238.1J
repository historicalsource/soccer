	.TITLE SOCINT
	.RADIX 16
	.SBTTL ****************************
	.SBTTL *
	.SBTTL * MODULE: SOCINT
	.SBTTL * PROGRAMMER: DFT
	.SBTTL * FUNCTION: SOCCER I/O
	.SBTTL *
	.SBTTL ****************************
	.ASECT
	.ENABLE	AMA
	.PAGE
	.SBTTL GLOBAL SYMBOLS
;
; GLOBAL ENTRY POINTS DEFINED ELSEWHERE
;
	.GLOBL	START,MOOLAH
	
;
; GLOBAL ENTRY POINT DEFINED HERE
;
	.GLOBL	RESET,QCHKS8
	
;
;GLOBAL VARIABLES
;
	.GLOBL	TBVD,TBHD,J,K,ATRACT,SLOCK,OPTION,SYNC,WHISTL,THUD,CHKSM8
	.GLOBL	CROWD,SWSTAT,BEEP,PLAOPT,WTCHDG,ALARM,TESTSW,POPBIT
	.GLOBL $CCTIM,SCRODS,INPUT,UMINUT,USECON,$CMODE,INTCNT,RKSWIT
	
;
;NON BASE PAGE RAM LOCATIONS DEFINED ELSEWHERE
;
	.GLOBL	HORDIS,VERDIS,TPICT,TCOLR
	.SBTTL EQUATES
			;
ALPHR	=200		;30 CHARS/ROW 200-27D
ALPHL	=380		;4 ROWS, 3 USEABLE
SCRFLD	=800		;30 "COLUMNS" X 30 CHARS
			;
;
;MOTION OBJECT PARAMETERS
;
MOBJ	=0BC0		;TO 0BFF
HPICT	=MOBJ		;MOTION OBJECT 1 PICTURE #
HVPOS	=MOBJ+1		;MOTION OBJECT 1 VERTICAL POS.
HHPOS	=MOBJ+32.	;MOTION OBJECT 1 HORIZ. POS.
HCOLR	=MOBJ+33.	;MOTION OBJECT 1 COLORING
NUMPOB	=16.		;16 PHYSICAL MOTION OBJECTS
;IDENTICAL BLOCKS FOR 15 MORE MOTION OBJECTS FOLLOW
;
			;
	.PAGE
;=======================
;
;	INPUT PORTS
;
;=======================
READ1	=1800		;DEPENDS UPON 'LD' BIT VALUES:
			;11==> TEAM 1, LEFT TBALL COUNTERS
			;10==> TEAM 1, RIGHT TBALL COUNTERS
			;00==> TBALL DIRECTIONS.
READ2	=1802		;DEPENDS UPON 'LD' BIT VALUES:
			;11==> TEAM 2, LEFT TBALL COUNTERS.
			;10==> TEAM 2, RIGHT TBALL COUNTERS.
			;00==> SWITCHES:D7-D4:SWITCHES 0-3
			;D3-D2=LANGUAGE (00=ENGLISH, 01=GERMAN, 10=FRENCH, 11=SPANISH)
RULES	=02		;D1=RULES OPTION FLAG BIT
TWO4OP	=01		;D0=2/4 PLAYER SWITCH
READ	=1801		;D7-ENDSCREEN; D6-TEST; D5-SLAM; D4-D3 SPARE;
			;D2=COIN(LEFT); D1-COIN(MID); D0=COIN(RIGHT)
TEST	=READ		;ON D6
VENDSC=	READ		; ON D7.
READ3	=1803		;OPTION SWITCHES
TWOCOM	=40		;2 COIN MINIMUM
MIDMEK	=20		;MIDDLE MECH MULTIPLIER
RITMEK	=18		;RIGHT MECH MULTIPLIER
TIMASK	=7		;TIME/COIN
;==========================
;
;	OUTPUT PORTS
;
;==========================

SFHPOS	=1000		;SCROLLFIELD OFFSET (8 BITS) (OUT0)
OUT1	=1001		;OUTPUT:
RULITE	=80		;BITS 7=RULES LIGHT (0=OFF, 1=ON)
LD2.1	=40		;BIT 6=RESTART RIGHT TBALL COUNTERS
LD1.1	=20		;BIT 5=RESTART LEFT TBALL COUNTERS
LD2.0	=^C40		;INIT RIGHT TBALLS, READ SWITCHES AND DIRECTIONS
LD1.0	=^C20		;INIT LEFT TBALLS, READ RIGHT TBALLS
LITE24	=10		;BIT 4=2/4 PLAYER LIGHT
			;BIT 3=SPARE
			;BIT 2=KICKER
			;BIT 1=HIT
			;BIT 0=WHISTLE
OUT2	=1002		;BITS 7=AMP OFF
CCLBIT	=40		;LEFT COIN COUNTER
CCMBIT	=20		;MIDDLE COIN COUNTER
CCRBIT	=10		;RIGHT COIN COUNTER
			;BITS 3-0=NOISE AMPLITUDE
AMPOFF	=80
WTCHDG	=1005		;WATCHDOG TIMER RESET
INTACK	=1004		;INTERRUPT ACKNOWLEDGE
;
;========================
;
;	MISC
;
;========================
;
			;
PROG	=2000		;8K OF PROGRAM
PARROW	=0BF		;ARROW PIC
NUMSTM	=50		;NUMBER 0 PICTURE#
ALPNUM	=NUMSTM+9.	;ALPHABET PICTURE # (A-1)
FLIPPR	=80
REVERS	=40
	.PAGE
	.SBTTL ZERO PAGE (INTERNAL USE ONLY)
	.BSECT BPINT
MOTDON:	.BLKB 1		;FLAG FOR IRQ 0=MOTUP SKIPPED, 1=MOTUP DONE
			;---
TOUT1:  .BLKB 1		;HOLDING CELL FOR OUT1 (SEE SOUND,TBALL)
TBDIR:	.BLKB 1		; TBALL DIRECTIONS, 1==>COUNTING DOWNWARD.
			;---
OTB:	.BLKB 1		; OLD TBALL BASE VALUES, LOCS 0,2,4,6.
NEWTB:	.BLKB 7		; NEW TBALL BASE VALUES, LOCS 0,2,4,6.
			;---
TBCTR:	.BLKB 7		; TBALL COUNTERS, LOCS 0,2,4,6.
TBDIRO	=TBCTR+1	;OLD TBALL DIRECTIONS
TBDIRC	=TBCTR+3	;TBALL DIRECTION CHANGED 1=>CHANGED DIRECTION
			;---
;ALL SWITCHES ASSERTED LOW
TADL:	.BLKB 1		;ADDRESS PTR (TO SCROLL FIELD)
TADH:	.BLKB 1
FIELD:  .BLKB 1		;COUNTS FIELD IN A FRAME
DBSW:	.BLKB 3		;DE-BOUNCE SAVE WORDS (0 & 2)
TSFDL	=DBSW+1		;SCROLL FIELD DISPLACEMENT (TEST USE ONLY)
OLDPOT:	.BLKB 1
	.PAGE
	.PAGE
	.INCLUDE COND65
	.PAGE
	.SBTTL INTERRUPT
	.CSECT
;ENTERED 4 TIMES/FRAME, AT LINES 64, 128, 192, & 240.
IRQ:	PHA			;SAVE REGS
	TXA
	PHA
	TYA
	PHA
	CLD			;SET HEX
	.SBTTL	SOFTWARE WATCHDOG
;BELOW CODE CHECKS S.P., P.C. & PSW FOR VALIDITY
	TSX			;X <- SP
	BPL 86$			;STACK TOO DEEP, ABORT
	LDA AX,104		;GET OLD PSW
	AND I,10		;BREAK?
	BNE 86$			;YES, ABORT
	LDA AX,106		;PCH
;
	CMP I,PROG/100		;CHECK LOW LIMIT
	BCC 86$
	CMP I,<PROG+2000>/100	;CHECK HIGH LIMIT

;ABOVE 12 LINES DOES A D.P. COMPARE OF PC:FTAB

	BCC 5$			;IF BORROW, P.C. IS IN BOUNDS
86$:				;HALT FOR DEVELOPMENT ONLY.
	JMP RESET		;ABORT ENTRY, DO POWER-ON

5$:	LDA SYNC		;CHECK SYNC WORD
	CMP I,6
	BCS 86$

;IF SYNC >= 6, PROCESSOR IS IN "PHANTOM-LOOP"

	STA A,WTCHDG		;ALL O.K., HIT DOG
	JSR TBREAD		; READ THE TBALL COUNTERS, ETC.
	INC INTCNT		;COUNT INTERRUPTS
	.PAGE
	.SBTTL	MOVE MOTION OBJECT PARAMS
;-13.-18 SCAN LINES
	BIT VENDSC		; TEST FOR ENDSCREEN.
	IFMI			;D7 ON==>ENDSCREEN.
				;---------
	  DEC FIELD		;COUNT FIELDS
  	  IFMI			;--------
	    LDA I,0			;START A NEW FRAME.
	    STA MOTDON		;DO THE MOTION UPDATE
	    LDA I,2			;3 FIELD'S PER FRAME
	    STA FIELD		;(2,1,0)
	    INC SYNC		;SYNC UP MAINLINE
	  THEN
  	  LDA MOTDON		;IF MOTION UPDATE HAS NOT YET BEEN DONE
	  IFEQ			;THIS FRAME, THEN DO IT
	  LDA SLOCK
	  IFEQ
	    INC MOTDON
	    LDX I,<NUMPOB-1>*2	      	;DO FOR EACH PHYSICAL OBJECT
	    BEGIN
	      LDA AX,HORDIS
	      STA AX,HHPOS        	        ;OUT TO HARDWARE
	      LDA AX,VERDIS        	        ;THIS ONE'S PRE-ADJUSTED
	      STA AX,HVPOS        	        ;CORRECT OR BLANKED, OUT TO HDW.
	      LDA AX,TPICT
	      STA AX,HPICT
	      LDA AX,TCOLR
	      STA AX,HCOLR
	      DEX
	      DEX
	    MIEND	      	      	;---
	    LDA SCRODS
	    STA A,SFHPOS		;STORE TO SCROLLFIELD DISPLACEMENT
	    THEN
	  THEN
	THEN

	.PAGE
	.SBTTL	DE-BOUNCE SWITCHES
;NOTE-SWITCHES ARE LOW-TRUE (107 CYCLES, INCL JSR) (CALLED ONCE ONLY)
	LDX I,2
	BEGIN
	  LDY ZX,INPUT		;READ SWITCHES
	  LDA ZX,DBSW		;SAVE OLD SWITCHES
	  STY ZX,DBSW		;REPLACE WITH NEW
	  TAY			;COPY OLD
	  AND ZX,DBSW		;MAKE ONES WHERE BOTH OFF
	  ORA ZX,SWSTAT
	  STA ZX,SWSTAT		;TURN OFF IN STATUS
	  TYA			;GET BACK OLD
	  ORA ZX,DBSW		;MAKE ZEROES WHERE BOTH ON
	  AND ZX,SWSTAT		;TURN ON IN STATUS
	  STA ZX,SWSTAT		;SAVE NEW STATUS
	  DEX
	  DEX
	MIEND
	.PAGE
	.SBTTL	HANDLE SOUNDS
SOUND:	LDA PLAOPT		;SET RULES FLAG FOR OUT1
	AND I,RULES!TWO4OP
	LSR			;TWO4OP TO CARRY
	IFNE			;RULES?
	  LDA I,RULITE		;YES. TURN ON RULES LIGHT
	THEN
	IFCC			;4 PLAYERS?
	  ORA I,LITE24		;YES. TURN ON 2/4 PLAYER LIGHT
	THEN
	STA TOUT1
	LDA ALARM		;SLAM ALARM?
	ORA ATRACT
	BNE 10$
	LDA I,0
	STA TOUT1
	STA BEEP
	STA WHISTL
10$:	LDA WHISTL	;WHISTLE
	BEQ 1$
	DEC WHISTL	;TIME IT
	LDA INTCNT	;WARBLE
1$:	LSR
	LSR
	AND I,1
	ORA BEEP		;STEADY TONE
	LSR THUD	;HIT SOUND
	BCC 2$
	ORA I,6
2$:
	EOR I,4		;RESET CROWD SOUND DURING HITS
	ORA TOUT1
	STA TOUT1
	LDA ALARM	;IF GAME, OR ALARM
	ORA ATRACT
	IFNE
	  LDA I,AMPOFF	;TURN ON SOUND
	THEN
	ORA CROWD	;ADD CROWD
3$:	LDY $CCTIM		;COIN COUNTER (LEFT
	IFMI
	  ORA I,CCLBIT		;TURN IT ON
	THEN
	LDY $CCTIM+1		;COIN COUNTER(MID)
	IFMI
	  ORA I,CCMBIT
	THEN
	LDY $CCTIM+2		;COINT COUNTER (RIGHT
	IFMI
	  ORA I,CCRBIT
	THEN
4$:	STA A,OUT2

	.PAGE
	.SBTTL	HANDLE QUADRATURE TRACKBALL
TBALL:				;---
	JSR TBCALC		;TBALL CALCULATIONS
	LDA OPTION		;SET UP MULTIPLIER
	LSR			;FOR COIN65
	STA $CMODE
	JSR MOOLAH		;COIN ROUTINE
;IF MOTUP WAS NOT EXECUTED, WE ARE POSSIBLY ONLY 280 CYCLES INTO V-BLANKING
;(ABOUT 1/2 THROUGH LINE 245) IF WE WERE TO "STA A,INTACK" NOW, BEFORE
;LINE 256, WE WOULD BE INTERRUPTED AGAIN BY THE FALLING EDGE OF 32V @ LINE
;256.
12$:				;---
	BIT VENDSC		; WAIT UNTIL ENDSCREEN IS OVER.
	BMI 12$			;
;WASTE TIME
2$:	STA A,INTACK		;ACKNOWLEDGE INTERRUPTS
				;RETURN FROM IRQ PREPARATION
	PLA
	TAY
	PLA
	TAX
	PLA
M40:	RTI			;RTI=40 HEX, USED TO TEST TEST SW.

				;ENDSCREEN=7&4 CYCLES
	.SBTTL POWER-ON-RESET
RESET:	LDX I,0FF
	TXS			;SET UP STACK
;NOW FALL THROUGH TO CLEAR RAM, FOR BOTH GAME AND TEST
	.SBTTL SELF-TEST
STEST:	CLD
	LDX I,0
	TXA
1$:	STA ZX,0
	STA AX,ALPHL
	STA AX,ALPHR
	STA AX,SCRFLD
	DEX
	BNE 1$
	STA A,OUT1		;HIT KICKER
	BIT A,TEST		;CHECK TEST SW.
	BVC TREPT		;BRANCH IF ON
	JMP START		;ELSE GO TO GAME MODE

	.SBTTL	ZERO-PAGE TEST
TREPT:	LDX I,11		;BEGINNING PATTERN
	TXS			;S HOLDS PATTERN
	TXA
	STA Z,0			;TEST CELL START @ 0
	LDY I,0
2$:	LDX I,1			;ONE LESS COUNT BEFORE IT WRAPS
3$:	INY			;SCAN FORWARD
	LDA AY,0		;ZERO?
	BNE 5$			;NO, ERROR
	INX			;HOW FAR HAVE WE SCANNED
	BNE 3$			;KEEP MOVING
	TSX
	TXA			;ACC <- PATTERN
	STA A,WTCHDG
	INY			;POINT TO TEST CELL
	CMP AY,0		;DOES IT HAVE PATTERN
	BNE 5$			;IF NOT, IS ERROR
	LDX I,0			;ELSE CLEAR CELL
	STX ZY,0
	INY			;POINT TO NEXT TEST CELL
	BNE 4$			;IF PASS NOT COMPLETE
	ASL			;ELSE SHIFT PATTERN
	LDX I,19.		;FOR MSG. IF DONE
	BCS 6$			;BRANCH IF DONE
4$:	TAX			;PATTERN -> ACC
	TXS			;    "   -> STORAGE
	STX ZY,0		;    "   -> NEW TEST CELL
	BNE 2$			;***ALWAYS, REPEAT SCAN

5$:	LDX I,16.
6$:	LDY I,16.
	.SBTTL	REPORT MEMORY STATUS
MEMREP:	LDA AX,ERMSG
	STA AY,ALPHL+28		;DISPLAY ON SIDES
	AND I,3F		;CLEAR REFLECT BITS
	BEQ 1$
	CLC
	ADC I,ALPNUM		;DISPLAY ON PLAYFIELD
1$:	STA AY,SCRFLD+4		;GET A LITTLE AWAY FROM THE EDGE
	DEX
	DEY
	BMI PATSCN
	CPY I,9
	BNE MEMREP

	.PAGE
	.SBTTL ROM TEST
	LDX I,0			;LOW BYTE OF ADDRESS
	STX TADL
	TXS			;SET SP TO 0 (=ALL OK)
	LDA I,PROG/100		;HIGH BYTE OF ADDRESS
	STA TADH
	LDX I,31.		;32 PAGES OF ROM (8K) 
	LDA I,12		;SEED FOR LRC (12,34,56,78,9A,BC,DE,F0)
	STA K
	BEGIN			;TEST LOOP
	  LDY I,0
	  STX A,WTCHDG		;MUZZLE DOG
	  BEGIN			;1 PAGE LOOP
	    EOR NY,TADL		;LONGITUDINAL PARITY
	    INY
	  EQEND
	  TAY			;SAVE EOR FIGURE
	  TXA
	  AND I,3		;ISOLATE PAGE IN 1K HUNK
	  CMP I,1		;CLEAR CARRY IF LAST PAGE IN 1K HUNK
	  TYA			;RESTORE EOR FIGURE
	  IFCC			;DONE WITH A 1K HUNK?
	    IFNE		;YES. BAD?
	      PHA		;YES. DUMP IT ON STACK
	    THEN		;NO
	    LDA K		;UPDATE SEED FOR NEXT 1K HUNK
	    ADC I,22
	    STA K
	  THEN
	  INC TADH		;NEXT PAGE PLEASE
	  DEX			;DEC PAGE COUNTER
	MIEND
	LDA I,6			;DONE WITH TEST
	TAY
	TSX
	IFEQ			;BAD ROM?
	  LDA I,9		;YES
	THEN
	TAX			;X=6 IF GOOD, 9 IF BAD ROM
	BNE MEMREP		;**ALWAYS**
	.PAGE
	.SBTTL	PATTERN SCREEN
PATSCN:	LDX I,0
1$:	TXA
	STA AX,ALPHR
	STA AX,ALPHL+40
	STA AX,SCRFLD+100
	STA AX,SCRFLD+200
	STA AX,SCRFLD+300
	INX
	BNE 1$
	STX A,SFHPOS
	TXS			;S>0==>IN-LINE SUBROUTINES
				;---
	LDX I,6			;PREPARE CHARACTERS (4 SETS OF 4) TO REPRESENT THE
				;FOUR TRACKBALLS
20$:	LDA AX,ARPICT
	STA AX,HPICT+<2*0>
	STA AX,HPICT+<2*4>
	STA AX,HPICT+<2*8>
	STA AX,HPICT+<2*12.>
	LDA AX,ARCOLR
	STA AX,HCOLR+<2*0>
	STA AX,HCOLR+<2*4>
	STA AX,HCOLR+<2*8>
	STA AX,HCOLR+<2*12.>
	CLC			;
	ADC I,0C0		;
	DEX			;
	DEX			;
	BPL 20$			;
				;---
	BMI SWTEST
ARPICT:	.BYTE PARROW,1B		;SE
	.BYTE PARROW?FLIPPR,1C	;NE
	.BYTE PARROW?FLIPPR?REVERS,36	;NW
	.BYTE PARROW?REVERS,39	;SW
ARCOLR	=ARPICT+1
	.PAGE
	.SBTTL	SWITCH TEST
SWTEST:				;---
				;FIRST, READ THE SWITCHES AND TBALL COUNTERS
				;
	.SBTTL READ TBALL COUNTERS ET AL
TBREAD:
	LDA READ		;INPUT(0):=READ ENDSCREEN, TEST SW. AND COINS
	STA TESTSW
	LDA TOUT1		
	AND I,<LD1.0&LD2.0>	;PREPARE FOR READING/LOADING COUNTERS
	TAY			
	ORA I,LD2.1		
	LDX READ1		;(11)READ THE LEFT BANK OF COUNTERS
	STX TBCTR+0
	LDX READ2		
	STX TBCTR+2
	STA OUT1		;(10)READ THE RIGHT BANK OF COUNTERS 
	LDX READ1		
	STX TBCTR+4
	LDX READ2		
	STX TBCTR+6
				;---
	STY OUT1		;(00)STOP BOTH LEFT AND RIGHT BANKS FROM
	LDX READ1		;COUNTING. READ TBALL DIRECTIONS.
	STX TBDIR
	LDX READ2		;READ KICK SWITCHES
	STX RKSWIT		
	TAY			;PREPARE TO RESTART RIGHT BANK COUNTING.
	ORA I,<LD1.1!LD2.1>	;PREPARE TO RESTART LEFT BANK COUNTING.
				;---
	STY OUT1		;(10)RESTART RIGHT BANK, THEN IMMEDIATELY
	LDX READ1		;(11)READ THE COUNTERS STARTING VALUE
	LDY READ2
	STX NEWTB+4
	STY NEWTB+6
	STA OUT1		;RESTART LEFT BANK. NOW READ ITS STARTING
	LDX READ1		;VALUES QUICKLY TO AVOID COUNTING ERRORS.
	LDY READ2
	STX NEWTB+0		;THE NEW INITIAL TBALL WRITING VALUES FOR
	STY NEWTB+2		;LEFT PLAYERS, BOTH TEAMS
	LDX READ3		;READ OPTION SWITCHES
	STX OPTION
	TSX
	BPL 63$
	RTS
	.PAGE
	.SBTTL PROCESS SWITCHES
63$:				;SELF-TEST CODE
				;---
	LDY K			;K=#OF SWITCHES SET IN READ & READ1
	LDX I,0			;CLR X
	LDA A,RKSWIT		;
	ORA I,0C		; IGNORE UNUSED D3,D2
	SEC
	ROL
1$:	BCS 2$
	INX			;COUNT 0'S
2$:	ASL			;SHIFT TO NEXT SW
	BNE 1$			;IF THERE IS ONE
	LDA A,TESTSW		;OTHER SWITCHES
	BIT A,M40		;TEST SW?
	BEQ 25$			;STILL ON, CONTINUE
	JMP RESET		;ELSE RESET TO GAME
25$:	ORA I,098		;REPEAT ABOVE. ALSO,IGNORE ENDSCREEN.
	SEC
	ROL
3$:	BCS 4$
	INX
4$:	ASL
	BNE 3$
;AT THIS POINT, X CONTAINS THE # OF SWITCHES CLOSED
	TXA			;SAVE X
	CLC			;FLAG "NO CHANGE"
5$:	DEX
	BMI 6$			;X OUT, HOW'S Y DOING
	DEY			;ELSE MATCH DEX WITH DEY
	BPL 5$			;EQUAL SO FAR, LOOP
	BMI 7$			;ELSE Y WAS LESS, BEEP

6$:	DEY
	BMI 8$			;X=Y, NO SOUND
7$:	SEC			;COME HERE TO BEEP
8$:	AND I,0F		;LIMIT TO 15 SWITCHES
	STA K			;SAVE SWITCHES FOR NEXT
	LDA I,07A		;CTRLD, KICKER (SHIFTED RIGHT) & LIGHTS
	ROL			;LINE IT UP AND PUT IN WHISTLE
	STA A,OUT1		;SET CTRLD=1, AND WHISTLE
	STA A,TOUT1		;FOR TBALL READER
				;---
				; WAIT A WHILE.
	LDX I,0			;MAKE X=0 (OR AT MOST 5)
9$:	CMP NX,0		;WASTE 6 CYCLES
	INX			;+2 MORE
	BNE 9$			;+ AT LEAST 3 (*256=3.7 MS.)
				;---
	LSR			;SET C IF ANY SWITCHES CHANGED
	LDA CROWD
	ORA I,AMPOFF		;SET ATRACT BAR
	STA A,OUT2		;MAKE SURE SOUNDS ON
	STA A,WTCHDG		;KEEP DOG QUIET
;IF A SWITCH CHANGED, BUMP THE MOTION OBJECT PTR FOR BELOW TEST
	LDA J
	BCC 10$			;SKIP IF NO CHANGE
	ADC I,7			;ADDS 8, CUZ CARRY IS SET
10$:	AND I,018		;KEEP IT A VALID OBJECT PTR
	STA J
	.PAGE
	.SBTTL	TBALL DISTANCE CALCULATIONS
TBCALC:				;USED IN GAME & SELF-TEST
	LDA TBDIR
	TAX
	EOR TBDIRO		;NOW 1'S MEAN CHANGE OF DIRECTION
	STX TBDIRO
	STA TBDIRC
	LDX I,6
	BEGIN
	LDA X,TBCTR		;---HORIZ. COMPONENT---
	SEC			;
	SBC X,OTB		;A=INITIAL TBALL VALUE-OLD VALUE
	LSR TBDIR		;
	AND I,0F		;JUST HORIZ FIRST
	BEQ 2$			;0 STAYS 0 (NO CHANGE IN SPEED)
	BCC 2$			;+ STAYS +
	ORA I,0F0		;ELSE PUT IN SIGN
2$:	LSR TBDIRC		;IF TBALL DIRECTION CHANGED, IGNORE THE COUNT
	BCS 22$			;
	ADC X,TBHD		;
	BVC 21$			;IF BUCKET OVERFLOWS,
	EOR I,80		;THEN SET TO MAXIMUM
	ASL			;COUNT OF THE CORRECT
	LDA I,7F		;SIGN
	ADC I,0
21$:
	STA X,TBHD		;
22$:				;---VERTICAL COMPONENT---
	LDA X,TBCTR
	SEC
	ORA I,0F		;MAKE LSB'S DON'T CARE
	SBC X,OTB		;TAKE OUT COUNT OF 4 MS AGO
	LSR
	LSR
	LSR
	LSR			;DOWN TO BOTTOM
	LSR TBDIR		;CHECK DIRECTION
	ORA I,0			;TSTA
	BEQ 3$
	BCC 3$
	ORA I,0F0
3$:	LSR TBDIRC		;IF TBALL DIRECTION CHANGED, IGNORE THE COUNT
	BCS 32$		;
	ADC X,TBVD
	BVC 31$			;IF BUCKET OVERFLOWS,
	EOR I,80		;THENSET TO MAXIMUM
	ASL			;COUNT OF THE CORRECT
	LDA I,7F		;SIGN
	ADC I,0
31$:
	STA X,TBVD
32$:
				;---
	LDA X,NEWTB		;
	STA X,OTB		; SAVE THE NEW INITIAL COUNTER VALUE.
	DEX
	DEX
	MIEND			;*********************
	LDA POPBIT		;GET BYTE WITH OFFSIDES & 2/4 PLAYER READINGS

	EOR I,0FF
	AND OLDPOT		;FLIP OPTION BITS ONLY ON 0 -> 1
	EOR PLAOPT
	STA PLAOPT
	LDA POPBIT
	STA OLDPOT
	TSX			;RETURN IF NOT
	BPL 63$			;IN TEST MODE
	RTS			;*********************
63$:
				;
				;---
	.PAGE
;THE FOLLOW IS SELF-TEST CODE
TBTMOV:
	LDX I,6
	BEGIN
	  TXA	  	  	  ; NOW, MOVE THE OBJECTS.
	  CLC			;
	  ADC J			;
	  TAY			;
	  LDA X,TBVD		;
	  CLC
	  ADC Y,HVPOS
	  STA Y,HVPOS		;
	  LDA X,TBHD
	  CLC
	  ADC Y,HHPOS
	  STA Y,HHPOS		;
	  LDA I,0			;
	  STA X,TBVD		;PREPARE FOR NEXT COUNT
	  STA X,TBHD
	  DEX
	  DEX
	MIEND
	.SBTTL	SCROLL-FIELD TEST
SCFTST:				;---
	BIT RKSWIT		;
	BMI 1$			; SELECT 1, LEFT TEAM.
	INC TSFDL		;ELSE MOVE TOWARD #0 (LEFT)
1$:				;
	BVS 2$			;
	DEC TSFDL
2$:	LDA TSFDL
	STA A,SFHPOS		;OUT TO HARDWARE
;SET CROWD VOLUME PROPORTIONAL TO # OF SWITCHES CLOSED
	LDX K			;1- CLOSED SWITCHES
	DEX			;
	TXA			;
				;(N-1)
	BEQ 3$			;
	ADC I,3			;PLUS 3 (BUT KEEP ZERO AT ZERO)
3$:
	AND I,0F
	STA CROWD		;USE TO TEST CROWD SOUND
;NOW DISPLAY CODE IN OPTION SWITCHES
	.PAGE
	.SBTTL DISPLAY OPTIONS
	LDA OPTION		;TIME: GET TIME/COIN CODE
	AND I,TIMASK
	TAY
	LDA AY,UMINUT
	CLC
	ADC I,NUMSTM
	STA A,SCRFLD+28		;DISPLAY MINUTES
	LDA AY,USECON
	LSR
	LSR
	LSR
	LSR
	CLC
	ADC I,NUMSTM
	STA A,SCRFLD+29		;DISPLAY SECONDS
	LDA I,NUMSTM
	STA A,SCRFLD+2A
	LDY I,NUMSTM+1
	LDA OPTION		;MECH MULTIPLIERS: MIDDLE MECH
	AND I,MIDMEK
	IFNE			;CONVERT OFF TO 1, ON TO 2
	  INY
	THEN
	LDA I,NUMSTM+1		;LEFT MECH MULT
	STA A,SCRFLD+48
	STY A,SCRFLD+49		;DISPLAY MIDDLE MECH MULTIPLIER
	LDA OPTION		;RIGHT MECH
	AND I,RITMEK
	LSR
	LSR
	LSR
	TAY
	LDA AY,RITCOD		;CONVERT 0-3 TO 1,4,5,6
	STA A,SCRFLD+4A		;DISPLAY RIGHT MECH MULTIPLIER
	LDY I,NUMSTM+1
	LDA OPTION		;2 COIN MINIMUM
	AND I,TWOCOM
	IFNE
	  INY			;DISPLAY 1 IF ON, 1 IF OFF
	THEN
	  STY A,SCRFLD+68
	JMP SWTEST		;LOOP WHILE TEST SW IS ON
ERMSG:	.ASCII /BAD@ROM@OK/
	.ASCII /BAD@RAM@OK/
RITCOD:	.BYTE NUMSTM+1,NUMSTM+4,NUMSTM+5,NUMSTM+6
	.PAGE
QCHKS8:	.BYTE CHKSM8		;8TH CHECKSUM
	.REPT 100
	.BYTE 0
	.ENDR
	.VCTRS 3FFA,RESET,RESET,IRQ
	.END
                                                                                                        